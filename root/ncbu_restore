#!/bin/bash

## This script must be called manually, either from witin the ncbu container (/ncbu_restore) or externally with the command
## "("docker exec <ncbu-container> ncbu_restore".  The script will attempt to restore a nextcloud instance (app and database) from a
## backup that was previously created by the ncbu script.  If restoration is required for migration to a new host, ensure a new
## nextcloud instance is initialised with the same admin user and database configurations that were in place during the last backup. 

## Import common variables and functions.
source /.ncbu_lib

printf "%b" "\n${BOLD}$(TIMESTAMP_f)${RESET} - Running ncbu restore...\n" | tee -a ${LOGFILE}

## Attempt to put nextcloud into maintenance mode so that all files and the database are locked.
## If setting mainenance mode to on fails, print an error then exit. 
printf "%b" "${BOLD}$(TIMESTAMP_f)${RESET} - Putting ${NEXTCLOUD_CONTAINER} into maintenance mode...\n" | tee -a ${LOGFILE}
if ! docker exec -u ${NEXTCLOUD_EXEC_USER} ${NEXTCLOUD_CONTAINER} php occ maintenance:mode --on; then
	printf "%b" "${BOLD}$(TIMESTAMP_f)${RESET} - Unable to enter maintenance mode.  Has the nextcloud app and database been initialised and connected?\n" | tee -a ${LOGFILE}
	printf "%b" "${BOLD}$(TIMESTAMP_f)${RESET} - Aborting restoration.\n" | tee -a ${LOGFILE}
	exit ${NO_MAINT}
else
	## Sync the ncbu nextcloud data backup to the nextcloud app volume.
	if [ -n "$(ls -A /backup/nextcloud_app)" ]; then	## First ensure there is data in the backup.
		printf "%b" "${BOLD}$(TIMESTAMP_f)${RESET} - Nextcloud data restore from ncbu: Syncing /backup/nextcloud_app to ${NEXTCLOUD_CONTAINER} volume...\n" | tee -a ${LOGFILE}
		rsync ${RSYNC_OPTIONS} /backup/nextcloud_app/* /mnt/nextcloud_app/.
		printf "%b" "${BOLD}$(TIMESTAMP_f)${RESET} - Finished nextcloud data sync from backup.\n" | tee -a ${LOGFILE}; fi

	## If a database container was defined and data exists, sync the ncbu database backup to the nextcloud database volume.
	if [ -n "${NEXTCLOUD_DATABASE_CONTAINER}" ] && [ -n "$(ls -A /backup/nextcloud_db)"]; then
		printf "%b" "${BOLD}$(TIMESTAMP_f)${RESET} - Nextcloud database restore from ncbu physical copy: Syncing /backup/nextcloud_db to ${NEXTCLOUD_DATABASE_CONTAINER} volume...\n" | tee -a ${LOGFILE}
		rsync ${RSYNC_OPTIONS} /backup/nextcloud_db/* /mnt/nextcloud_db/.
		printf "%b" "${BOLD}$(TIMESTAMP_f)${RESET} - Finished nextcloud database sync from backup.\n" | tee -a ${LOGFILE}; fi

	## Take nextcloud out of maintenance mode so that normal usage can resume.
	printf "%b" "${BOLD}$(TIMESTAMP_f)${RESET} - Taking ${NEXTCLOUD_CONTAINER} out of maintenance mode...\n" | tee -a ${LOGFILE}
	docker exec -u ${NEXTCLOUD_EXEC_USER} ${NEXTCLOUD_CONTAINER} php occ maintenance:mode --off

	## Scan the data files and update the cache accordingly.  This may take a while.
	printf "%b" "${BOLD}$(TIMESTAMP_f)${RESET} - Scanning the ${NEXTCLOUD_CONTAINER} data files and updating the cache accordingly.\n" | tee -a ${LOGFILE}
	printf "%b" "\t(This may take a while but the nextcloud instance should be accessible while the scan runs.)\n" | tee -a ${LOGFILE}
	docker exec -u ${NEXTCLOUD_EXEC_USER} ${NEXTCLOUD_CONTAINER} php occ files:scan --all -v

	## Rotate the logfile if needed.
	printf "%b" "${BOLD}$(TIMESTAMP_f)${RESET} - Rotating logfile if required....n" | tee -a ${LOGFILE}
	logrotate ${LOGROTATE_FILE}

	printf "%b" "${BOLD}$(TIMESTAMP_f)${RESET} - All done.\n\n" | tee -a ${LOGFILE}

	exit ${SUCCESS}
fi
