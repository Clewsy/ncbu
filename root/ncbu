#!/bin/bash

## This is the backup script that is called as a cron job.
## It will put nextcloud into maintenance mode then create physical snapshot backups of the nextcloud app and database volumes. 

## Import common variables and functions.
source /.ncbu_lib

printf "%b" "\n${BOLD}$(TIMESTAMP_f)${RESET} - Running ncbu (nextcloud backup)...\n" | tee -a ${LOGFILE}

## Attempt to put nextcloud into maintenance mode so that all files and the database are locked.
## If setting mainenance mode to on fails, print an error then exit.
printf "%b" "${BOLD}$(TIMESTAMP_f)${RESET} - Putting ${NEXTCLOUD_CONTAINER} into maintenance mode...\n" | tee -a ${LOGFILE}
if ! docker exec -u ${NEXTCLOUD_EXEC_USER} ${NEXTCLOUD_CONTAINER} php occ maintenance:mode --on; then
	printf "%b" "${BOLD}$(TIMESTAMP_f)${RESET} - Unable to enter maintenance mode.  Has the nextcloud app and database been initialised and connected?\n" | tee -a ${LOGFILE}
	printf "%b" "${BOLD}$(TIMESTAMP_f)${RESET} - Aborting backup.\n" | tee -a ${LOGFILE}
	exit ${NO_MAINT}
else
	## Sync the nextcloud app volume to the nextcloud-bu volume.
	printf "%b" "${BOLD}$(TIMESTAMP_f)${RESET} - Nextcloud data backup: Syncing ${NEXTCLOUD_CONTAINER} volume to /backup...\n" | tee -a ${LOGFILE}
	rsync ${RSYNC_OPTIONS} /mnt/nextcloud_app/* /backup/nextcloud_app/.
	printf "%b" "${BOLD}$(TIMESTAMP_f)${RESET} - Finished nextcloud data sync.\n" | tee -a ${LOGFILE}

	## Define environment variable for the group id GID of the nextcloud exec user (likely www-data).
	NEXTCLOUD_EXEC_USER_GID=$(docker exec ${NEXTCLOUD_CONTAINER} id -g ${NEXTCLOUD_EXEC_USER})
	## Make sure the permissions are set for group read access (www-data by default) at the top level of the data directory.
	## By default, the official nextcloud container stes the GID of the data directory to root.
	## The chown command below has no effect on the nextcloud app, but allows copying of the physical backup without being root.
	printf "%b" "${BOLD}$(TIMESTAMP_f)${RESET} - Setting permission of nextcloud data directory to :${NEXTCLOUD_EXEC_USER_GID}\n" | tee -a ${LOGFILE}
	chown -R :${NEXTCLOUD_EXEC_USER_GID} /backup/nextcloud_app/data
	printf "%b" "${BOLD}$(TIMESTAMP_f)${RESET} - Ensure user on host machine is part of group id GID=${NEXTCLOUD_EXEC_USER_GID} for read access to backup.\n" | tee -a ${LOGFILE}

	## If a database container was defined, sync the database volume to the nextcloud-bu volume.
	if [[ -n "${NEXTCLOUD_DATABASE_CONTAINER}" ]]; then
		printf "%b" "${BOLD}$(TIMESTAMP_f)${RESET} - Nextcloud database backup (physical copy): Syncing ${NEXTCLOUD_DATABASE_CONTAINER} volume to /backup...\n" | tee -a ${LOGFILE}
		rsync ${RSYNC_OPTIONS} /mnt/nextcloud_db/* /backup/nextcloud_db/.
		printf "%b" "${BOLD}$(TIMESTAMP_f)${RESET} - Finished nextcloud database sync.\n" | tee -a ${LOGFILE}; fi

	## Take nextcloud out of maintenance mode so that normal usage can resume.
	printf "%b" "${BOLD}$(TIMESTAMP_f)${RESET} - Taking ${NEXTCLOUD_CONTAINER} out of maintenance mode...\n" | tee -a ${LOGFILE}
	docker exec -u ${NEXTCLOUD_EXEC_USER} ${NEXTCLOUD_CONTAINER} php occ maintenance:mode --off

	## Rotate the logfile if needed.
	printf "%b" "${BOLD}$(TIMESTAMP_f)${RESET} - Rotating logfile if required....n" | tee -a ${LOGFILE}
	logrotate ${LOGROTATE_FILE}

	printf "%b" "${BOLD}$(TIMESTAMP_f)${RESET} - All done.\n\n" | tee -a ${LOGFILE}

	exit ${SUCCESS}
fi
